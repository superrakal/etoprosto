{"version":3,"sources":["vendor/ember-cli/test-support-prefix.js","bower_components/ember/ember-testing.js","vendor/ember-cli/test-support-suffix.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011-2015 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   2.0.3\n */\n\n(function() {\nvar enifed, requireModule, eriuqer, requirejs, Ember;\nvar mainContext = this;\n\n(function() {\n  var isNode = typeof window === 'undefined' &&\n    typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n  if (!isNode) {\n    Ember = this.Ember = this.Ember || {};\n  }\n\n  if (typeof Ember === 'undefined') { Ember = {}; };\n\n  if (typeof Ember.__loader === 'undefined') {\n    var registry = {};\n    var seen = {};\n\n    enifed = function(name, deps, callback) {\n      var value = { };\n\n      if (!callback) {\n        value.deps = [];\n        value.callback = deps;\n      } else {\n        value.deps = deps;\n        value.callback = callback;\n      }\n\n      registry[name] = value;\n    };\n\n    requirejs = eriuqer = requireModule = function(name) {\n      return internalRequire(name, null);\n    }\n\n    function internalRequire(name, referrerName) {\n      var exports = seen[name];\n\n      if (exports !== undefined) {\n        return exports;\n      }\n\n      exports = seen[name] = {};\n\n      if (!registry[name]) {\n        if (referrerName) {\n          throw new Error('Could not find module ' + name + ' required by: ' + referrerName);\n        } else {\n          throw new Error('Could not find module ' + name);\n        }\n      }\n\n      var mod = registry[name];\n      var deps = mod.deps;\n      var callback = mod.callback;\n      var reified = [];\n      var length = deps.length;\n\n      for (var i=0; i<length; i++) {\n        if (deps[i] === 'exports') {\n          reified.push(exports);\n        } else {\n          reified.push(internalRequire(resolve(deps[i], name), name));\n        }\n      }\n\n      callback.apply(this, reified);\n\n      return exports;\n    };\n\n    function resolve(child, name) {\n      if (child.charAt(0) !== '.') {\n        return child;\n      }\n      var parts = child.split('/');\n      var parentBase = name.split('/').slice(0, -1);\n\n      for (var i=0, l=parts.length; i<l; i++) {\n        var part = parts[i];\n\n        if (part === '..') {\n          parentBase.pop();\n        } else if (part === '.') {\n          continue;\n        } else {\n          parentBase.push(part);\n        }\n      }\n\n      return parentBase.join('/');\n    }\n\n    requirejs._eak_seen = registry;\n\n    Ember.__loader = {\n      define: enifed,\n      require: eriuqer,\n      registry: registry\n    };\n  } else {\n    enifed = Ember.__loader.define;\n    requirejs = eriuqer = requireModule = Ember.__loader.require;\n  }\n})();\n\nenifed('ember-debug', ['exports', 'ember-metal/core', 'ember-metal/features', 'ember-metal/error', 'ember-metal/logger', 'ember-debug/deprecation-manager', 'ember-metal/environment'], function (exports, _emberMetalCore, _emberMetalFeatures, _emberMetalError, _emberMetalLogger, _emberDebugDeprecationManager, _emberMetalEnvironment) {\n  /*global __fail__*/\n\n  'use strict';\n\n  exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;\n\n  /**\n  @module ember\n  @submodule ember-debug\n  */\n\n  /**\n  @class Ember\n  @public\n  */\n\n  function isPlainFunction(test) {\n    return typeof test === 'function' && test.PrototypeMixin === undefined;\n  }\n\n  /**\n    Define an assertion that will throw an exception if the condition is not\n    met. Ember build tools will remove any calls to `Ember.assert()` when\n    doing a production build. Example:\n  \n    ```javascript\n    // Test for truthiness\n    Ember.assert('Must pass a valid object', obj);\n  \n    // Fail unconditionally\n    Ember.assert('This code path should never be run');\n    ```\n  \n    @method assert\n    @param {String} desc A description of the assertion. This will become\n      the text of the Error thrown if the assertion fails.\n    @param {Boolean|Function} test Must be truthy for the assertion to pass. If\n      falsy, an exception will be thrown. If this is a function, it will be executed and\n      its return value will be used as condition.\n    @public\n  */\n  _emberMetalCore.default.assert = function (desc, test) {\n    var throwAssertion;\n\n    if (isPlainFunction(test)) {\n      throwAssertion = !test();\n    } else {\n      throwAssertion = !test;\n    }\n\n    if (throwAssertion) {\n      throw new _emberMetalError.default('Assertion Failed: ' + desc);\n    }\n  };\n\n  /**\n    Display a warning with the provided message. Ember build tools will\n    remove any calls to `Ember.warn()` when doing a production build.\n  \n    @method warn\n    @param {String} message A warning to display.\n    @param {Boolean} test An optional boolean. If falsy, the warning\n      will be displayed.\n    @public\n  */\n  _emberMetalCore.default.warn = function (message, test) {\n    if (!test) {\n      _emberMetalLogger.default.warn('WARNING: ' + message);\n      if ('trace' in _emberMetalLogger.default) {\n        _emberMetalLogger.default.trace();\n      }\n    }\n  };\n\n  /**\n    Display a debug notice. Ember build tools will remove any calls to\n    `Ember.debug()` when doing a production build.\n  \n    ```javascript\n    Ember.debug('I\\'m a debug notice!');\n    ```\n  \n    @method debug\n    @param {String} message A debug message to display.\n    @public\n  */\n  _emberMetalCore.default.debug = function (message) {\n    _emberMetalLogger.default.debug('DEBUG: ' + message);\n  };\n\n  /**\n    Display a deprecation warning with the provided message and a stack trace\n    (Chrome and Firefox only). Ember build tools will remove any calls to\n    `Ember.deprecate()` when doing a production build.\n  \n    @method deprecate\n    @param {String} message A description of the deprecation.\n    @param {Boolean|Function} test An optional boolean. If falsy, the deprecation\n      will be displayed. If this is a function, it will be executed and its return\n      value will be used as condition.\n    @param {Object} options An optional object that can be used to pass\n      in a `url` to the transition guide on the emberjs.com website, and a unique\n      `id` for this deprecation. The `id` can be used by Ember debugging tools\n      to change the behavior (raise, log or silence) for that specific deprecation.\n      The `id` should be namespaced by dots, e.g. \"view.helper.select\".\n    @public\n  */\n  _emberMetalCore.default.deprecate = function (message, test, options) {\n    if (_emberMetalCore.default.ENV.RAISE_ON_DEPRECATION) {\n      _emberDebugDeprecationManager.default.setDefaultLevel(_emberDebugDeprecationManager.deprecationLevels.RAISE);\n    }\n    if (_emberDebugDeprecationManager.default.getLevel(options && options.id) === _emberDebugDeprecationManager.deprecationLevels.SILENCE) {\n      return;\n    }\n\n    var noDeprecation;\n\n    if (isPlainFunction(test)) {\n      noDeprecation = test();\n    } else {\n      noDeprecation = test;\n    }\n\n    if (noDeprecation) {\n      return;\n    }\n\n    if (options && options.id) {\n      message = message + (' [deprecation id: ' + options.id + ']');\n    }\n\n    if (_emberDebugDeprecationManager.default.getLevel(options && options.id) === _emberDebugDeprecationManager.deprecationLevels.RAISE) {\n      throw new _emberMetalError.default(message);\n    }\n\n    var error;\n\n    // When using new Error, we can't do the arguments check for Chrome. Alternatives are welcome\n    try {\n      __fail__.fail();\n    } catch (e) {\n      error = e;\n    }\n\n    if (arguments.length === 3) {\n      _emberMetalCore.default.assert('options argument to Ember.deprecate should be an object', options && typeof options === 'object');\n      if (options.url) {\n        message += ' See ' + options.url + ' for more details.';\n      }\n    }\n\n    if (_emberMetalCore.default.LOG_STACKTRACE_ON_DEPRECATION && error.stack) {\n      var stack;\n      var stackStr = '';\n\n      if (error['arguments']) {\n        // Chrome\n        stack = error.stack.replace(/^\\s+at\\s+/gm, '').replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n        stack.shift();\n      } else {\n        // Firefox\n        stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').replace(/^\\(/gm, '{anonymous}(').split('\\n');\n      }\n\n      stackStr = '\\n    ' + stack.slice(2).join('\\n    ');\n      message = message + stackStr;\n    }\n\n    _emberMetalLogger.default.warn('DEPRECATION: ' + message);\n  };\n\n  /**\n    Alias an old, deprecated method with its new counterpart.\n  \n    Display a deprecation warning with the provided message and a stack trace\n    (Chrome and Firefox only) when the assigned method is called.\n  \n    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though\n    no warnings will be shown in production.\n  \n    ```javascript\n    Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n    ```\n  \n    @method deprecateFunc\n    @param {String} message A description of the deprecation.\n    @param {Object} [options] The options object for Ember.deprecate.\n    @param {Function} func The new function called to replace its deprecated counterpart.\n    @return {Function} a new function that wrapped the original function with a deprecation warning\n    @private\n  */\n  _emberMetalCore.default.deprecateFunc = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 3) {\n      var _ret = (function () {\n        var message = args[0];\n        var options = args[1];\n        var func = args[2];\n\n        return {\n          v: function () {\n            _emberMetalCore.default.deprecate(message, false, options);\n            return func.apply(this, arguments);\n          }\n        };\n      })();\n\n      if (typeof _ret === 'object') return _ret.v;\n    } else {\n      var _ret2 = (function () {\n        var message = args[0];\n        var func = args[1];\n\n        return {\n          v: function () {\n            _emberMetalCore.default.deprecate(message);\n            return func.apply(this, arguments);\n          }\n        };\n      })();\n\n      if (typeof _ret2 === 'object') return _ret2.v;\n    }\n  };\n\n  /**\n    Run a function meant for debugging. Ember build tools will remove any calls to\n    `Ember.runInDebug()` when doing a production build.\n  \n    ```javascript\n    Ember.runInDebug(() => {\n      Ember.Component.reopen({\n        didInsertElement() {\n          console.log(\"I'm happy\");\n        }\n      });\n    });\n    ```\n  \n    @method runInDebug\n    @param {Function} func The function to be executed.\n    @since 1.5.0\n    @public\n  */\n  _emberMetalCore.default.runInDebug = function (func) {\n    func();\n  };\n\n  /**\n    Will call `Ember.warn()` if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or\n    any specific FEATURES flag is truthy.\n  \n    This method is called automatically in debug canary builds.\n  \n    @private\n    @method _warnIfUsingStrippedFeatureFlags\n    @return {void}\n  */\n\n  function _warnIfUsingStrippedFeatureFlags(FEATURES, featuresWereStripped) {\n    if (featuresWereStripped) {\n      _emberMetalCore.default.warn('Ember.ENV.ENABLE_ALL_FEATURES is only available in canary builds.', !_emberMetalCore.default.ENV.ENABLE_ALL_FEATURES);\n      _emberMetalCore.default.warn('Ember.ENV.ENABLE_OPTIONAL_FEATURES is only available in canary builds.', !_emberMetalCore.default.ENV.ENABLE_OPTIONAL_FEATURES);\n\n      for (var key in FEATURES) {\n        if (FEATURES.hasOwnProperty(key) && key !== 'isEnabled') {\n          _emberMetalCore.default.warn('FEATURE[\"' + key + '\"] is set as enabled, but FEATURE flags are only available in canary builds.', !FEATURES[key]);\n        }\n      }\n    }\n  }\n\n  if (!_emberMetalCore.default.testing) {\n    // Complain if they're using FEATURE flags in builds other than canary\n    _emberMetalFeatures.FEATURES['features-stripped-test'] = true;\n    var featuresWereStripped = true;\n\n    delete _emberMetalFeatures.FEATURES['features-stripped-test'];\n    _warnIfUsingStrippedFeatureFlags(_emberMetalCore.default.ENV.FEATURES, featuresWereStripped);\n\n    // Inform the developer about the Ember Inspector if not installed.\n    var isFirefox = _emberMetalEnvironment.default.isFirefox;\n    var isChrome = _emberMetalEnvironment.default.isChrome;\n\n    if (typeof window !== 'undefined' && (isFirefox || isChrome) && window.addEventListener) {\n      window.addEventListener('load', function () {\n        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {\n          var downloadURL;\n\n          if (isChrome) {\n            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n          } else if (isFirefox) {\n            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n          }\n\n          _emberMetalCore.default.debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);\n        }\n      }, false);\n    }\n  }\n\n  _emberMetalCore.default.Debug = {\n    _addDeprecationLevel: function (id, level) {\n      _emberDebugDeprecationManager.default.setLevel(id, level);\n    },\n    _deprecationLevels: _emberDebugDeprecationManager.deprecationLevels\n  };\n\n  /*\n    We are transitioning away from `ember.js` to `ember.debug.js` to make\n    it much clearer that it is only for local development purposes.\n  \n    This flag value is changed by the tooling (by a simple string replacement)\n    so that if `ember.js` (which must be output for backwards compat reasons) is\n    used a nice helpful warning message will be printed out.\n  */\n  var runningNonEmberDebugJS = false;\n  exports.runningNonEmberDebugJS = runningNonEmberDebugJS;\n  if (runningNonEmberDebugJS) {\n    _emberMetalCore.default.warn('Please use `ember.debug.js` instead of `ember.js` for development and debugging.');\n  }\n});\nenifed('ember-debug/deprecation-manager', ['exports', 'ember-metal/dictionary', 'ember-metal/utils'], function (exports, _emberMetalDictionary, _emberMetalUtils) {\n  'use strict';\n\n  var deprecationLevels = {\n    RAISE: _emberMetalUtils.symbol('RAISE'),\n    LOG: _emberMetalUtils.symbol('LOG'),\n    SILENCE: _emberMetalUtils.symbol('SILENCE')\n  };\n\n  exports.deprecationLevels = deprecationLevels;\n  exports.default = {\n    defaultLevel: deprecationLevels.LOG,\n    individualLevels: _emberMetalDictionary.default(null),\n    setDefaultLevel: function (level) {\n      this.defaultLevel = level;\n    },\n    setLevel: function (id, level) {\n      this.individualLevels[id] = level;\n    },\n    getLevel: function (id) {\n      var level = this.individualLevels[id];\n      if (!level) {\n        level = this.defaultLevel;\n      }\n      return level;\n    }\n  };\n});\nenifed('ember-testing', ['exports', 'ember-metal/core', 'ember-testing/initializers', 'ember-testing/support', 'ember-testing/setup_for_testing', 'ember-testing/test', 'ember-testing/adapters/adapter', 'ember-testing/adapters/qunit', 'ember-testing/helpers'], function (exports, _emberMetalCore, _emberTestingInitializers, _emberTestingSupport, _emberTestingSetup_for_testing, _emberTestingTest, _emberTestingAdaptersAdapter, _emberTestingAdaptersQunit, _emberTestingHelpers) {\n  'use strict';\n\n  // adds helpers to helpers object in Test\n\n  /**\n    @module ember\n    @submodule ember-testing\n  */\n\n  _emberMetalCore.default.Test = _emberTestingTest.default;\n  _emberMetalCore.default.Test.Adapter = _emberTestingAdaptersAdapter.default;\n  _emberMetalCore.default.Test.QUnitAdapter = _emberTestingAdaptersQunit.default;\n  _emberMetalCore.default.setupForTesting = _emberTestingSetup_for_testing.default;\n});\n// to setup initializer\n// to handle various edge cases\nenifed('ember-testing/adapters/adapter', ['exports', 'ember-runtime/system/object'], function (exports, _emberRuntimeSystemObject) {\n  'use strict';\n\n  function K() {\n    return this;\n  }\n\n  /**\n   @module ember\n   @submodule ember-testing\n  */\n\n  /**\n    The primary purpose of this class is to create hooks that can be implemented\n    by an adapter for various test frameworks.\n  \n    @class Adapter\n    @namespace Ember.Test\n    @public\n  */\n  var Adapter = _emberRuntimeSystemObject.default.extend({\n    /**\n      This callback will be called whenever an async operation is about to start.\n       Override this to call your framework's methods that handle async\n      operations.\n       @public\n      @method asyncStart\n    */\n    asyncStart: K,\n\n    /**\n      This callback will be called whenever an async operation has completed.\n       @public\n      @method asyncEnd\n    */\n    asyncEnd: K,\n\n    /**\n      Override this method with your testing framework's false assertion.\n      This function is called whenever an exception occurs causing the testing\n      promise to fail.\n       QUnit example:\n       ```javascript\n        exception: function(error) {\n          ok(false, error);\n        };\n      ```\n       @public\n      @method exception\n      @param {String} error The exception to be raised.\n    */\n    exception: function (error) {\n      throw error;\n    }\n  });\n\n  exports.default = Adapter;\n});\nenifed('ember-testing/adapters/qunit', ['exports', 'ember-testing/adapters/adapter', 'ember-metal/utils'], function (exports, _emberTestingAdaptersAdapter, _emberMetalUtils) {\n  'use strict';\n\n  /**\n    This class implements the methods defined by Ember.Test.Adapter for the\n    QUnit testing framework.\n  \n    @class QUnitAdapter\n    @namespace Ember.Test\n    @extends Ember.Test.Adapter\n    @public\n  */\n  exports.default = _emberTestingAdaptersAdapter.default.extend({\n    asyncStart: function () {\n      QUnit.stop();\n    },\n    asyncEnd: function () {\n      QUnit.start();\n    },\n    exception: function (error) {\n      ok(false, _emberMetalUtils.inspect(error));\n    }\n  });\n});\nenifed('ember-testing/helpers', ['exports', 'ember-metal/core', 'ember-metal/features', 'ember-metal/property_get', 'ember-metal/error', 'ember-metal/run_loop', 'ember-views/system/jquery', 'ember-testing/test', 'ember-runtime/ext/rsvp'], function (exports, _emberMetalCore, _emberMetalFeatures, _emberMetalProperty_get, _emberMetalError, _emberMetalRun_loop, _emberViewsSystemJquery, _emberTestingTest, _emberRuntimeExtRsvp) {\n  'use strict';\n\n  /**\n  @module ember\n  @submodule ember-testing\n  */\n\n  var helper = _emberTestingTest.default.registerHelper;\n  var asyncHelper = _emberTestingTest.default.registerAsyncHelper;\n\n  function currentRouteName(app) {\n    var appController = app.__container__.lookup('controller:application');\n\n    return _emberMetalProperty_get.get(appController, 'currentRouteName');\n  }\n\n  function currentPath(app) {\n    var appController = app.__container__.lookup('controller:application');\n\n    return _emberMetalProperty_get.get(appController, 'currentPath');\n  }\n\n  function currentURL(app) {\n    var router = app.__container__.lookup('router:main');\n\n    return _emberMetalProperty_get.get(router, 'location').getURL();\n  }\n\n  function pauseTest() {\n    _emberTestingTest.default.adapter.asyncStart();\n    return new _emberMetalCore.default.RSVP.Promise(function () {}, 'TestAdapter paused promise');\n  }\n\n  function focus(el) {\n    if (el && el.is(':input, [contenteditable=true]')) {\n      var type = el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        _emberMetalRun_loop.default(el, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n          if (!document.hasFocus || document.hasFocus()) {\n            this.focus();\n          } else {\n            this.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function visit(app, url) {\n    var router = app.__container__.lookup('router:main');\n    var shouldHandleURL = false;\n\n    app.boot().then(function () {\n      router.location.setURL(url);\n\n      if (shouldHandleURL) {\n        _emberMetalRun_loop.default(app.__deprecatedInstance__, 'handleURL', url);\n      }\n    });\n\n    if (app._readinessDeferrals > 0) {\n      router['initialURL'] = url;\n      _emberMetalRun_loop.default(app, 'advanceReadiness');\n      delete router['initialURL'];\n    } else {\n      shouldHandleURL = true;\n    }\n\n    return app.testHelpers.wait();\n  }\n\n  function click(app, selector, context) {\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    _emberMetalRun_loop.default($el, 'mousedown');\n\n    focus($el);\n\n    _emberMetalRun_loop.default($el, 'mouseup');\n    _emberMetalRun_loop.default($el, 'click');\n\n    return app.testHelpers.wait();\n  }\n\n  function check(app, selector, context) {\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var type = $el.prop('type');\n\n    _emberMetalCore.default.assert('To check \\'' + selector + '\\', the input must be a checkbox', type === 'checkbox');\n\n    if (!$el.prop('checked')) {\n      app.testHelpers.click(selector, context);\n    }\n\n    return app.testHelpers.wait();\n  }\n\n  function uncheck(app, selector, context) {\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var type = $el.prop('type');\n\n    _emberMetalCore.default.assert('To uncheck \\'' + selector + '\\', the input must be a checkbox', type === 'checkbox');\n\n    if ($el.prop('checked')) {\n      app.testHelpers.click(selector, context);\n    }\n\n    return app.testHelpers.wait();\n  }\n\n  function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions) {\n    var arity = arguments.length;\n    var context, type, options;\n\n    if (arity === 3) {\n      // context and options are optional, so this is\n      // app, selector, type\n      context = null;\n      type = contextOrType;\n      options = {};\n    } else if (arity === 4) {\n      // context and options are optional, so this is\n      if (typeof typeOrOptions === 'object') {\n        // either\n        // app, selector, type, options\n        context = null;\n        type = contextOrType;\n        options = typeOrOptions;\n      } else {\n        // or\n        // app, selector, context, type\n        context = contextOrType;\n        type = typeOrOptions;\n        options = {};\n      }\n    } else {\n      context = contextOrType;\n      type = typeOrOptions;\n      options = possibleOptions;\n    }\n\n    var $el = app.testHelpers.findWithAssert(selector, context);\n\n    var event = _emberViewsSystemJquery.default.Event(type, options);\n\n    _emberMetalRun_loop.default($el, 'trigger', event);\n\n    return app.testHelpers.wait();\n  }\n\n  function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {\n    var context, type;\n\n    if (typeof keyCode === 'undefined') {\n      context = null;\n      keyCode = typeOrKeyCode;\n      type = contextOrType;\n    } else {\n      context = contextOrType;\n      type = typeOrKeyCode;\n    }\n\n    return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });\n  }\n\n  function fillIn(app, selector, contextOrText, text) {\n    var $el, context;\n    if (typeof text === 'undefined') {\n      text = contextOrText;\n    } else {\n      context = contextOrText;\n    }\n    $el = app.testHelpers.findWithAssert(selector, context);\n    focus($el);\n    _emberMetalRun_loop.default(function () {\n      $el.val(text);\n      $el.trigger('input');\n      $el.change();\n    });\n    return app.testHelpers.wait();\n  }\n\n  function findWithAssert(app, selector, context) {\n    var $el = app.testHelpers.find(selector, context);\n    if ($el.length === 0) {\n      throw new _emberMetalError.default('Element ' + selector + ' not found.');\n    }\n    return $el;\n  }\n\n  function find(app, selector, context) {\n    var $el;\n    context = context || _emberMetalProperty_get.get(app, 'rootElement');\n    $el = app.$(selector, context);\n\n    return $el;\n  }\n\n  function andThen(app, callback) {\n    return app.testHelpers.wait(callback(app));\n  }\n\n  function wait(app, value) {\n    return new _emberRuntimeExtRsvp.default.Promise(function (resolve) {\n      // Every 10ms, poll for the async thing to have finished\n      var watcher = setInterval(function () {\n        var router = app.__container__.lookup('router:main');\n\n        // 1. If the router is loading, keep polling\n        var routerIsLoading = router.router && !!router.router.activeTransition;\n        if (routerIsLoading) {\n          return;\n        }\n\n        // 2. If there are pending Ajax requests, keep polling\n        if (_emberTestingTest.default.pendingAjaxRequests) {\n          return;\n        }\n\n        // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n        if (_emberMetalRun_loop.default.hasScheduledTimers() || _emberMetalRun_loop.default.currentRunLoop) {\n          return;\n        }\n        if (_emberTestingTest.default.waiters && _emberTestingTest.default.waiters.any(function (waiter) {\n          var context = waiter[0];\n          var callback = waiter[1];\n          return !callback.call(context);\n        })) {\n          return;\n        }\n        // Stop polling\n        clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        _emberMetalRun_loop.default(null, resolve, value);\n      }, 10);\n    });\n  }\n\n  /**\n    Loads a route, sets up any controllers, and renders any templates associated\n    with the route as though a real user had triggered the route change while\n    using your app.\n  \n    Example:\n  \n    ```javascript\n    visit('posts/index').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method visit\n    @param {String} url the name of the route\n    @return {RSVP.Promise}\n    @public\n  */\n  asyncHelper('visit', visit);\n\n  /**\n    Clicks an element and triggers any actions triggered by the element's `click`\n    event.\n  \n    Example:\n  \n    ```javascript\n    click('.some-jQuery-selector').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method click\n    @param {String} selector jQuery selector for finding element on the DOM\n    @return {RSVP.Promise}\n    @public\n  */\n  asyncHelper('click', click);\n\n  /**\n    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n  \n    Example:\n  \n    ```javascript\n    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n     // assert something\n    });\n    ```\n  \n    @method keyEvent\n    @param {String} selector jQuery selector for finding element on the DOM\n    @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`\n    @param {Number} keyCode the keyCode of the simulated key event\n    @return {RSVP.Promise}\n    @since 1.5.0\n    @public\n  */\n  asyncHelper('keyEvent', keyEvent);\n\n  /**\n    Fills in an input element with some text.\n  \n    Example:\n  \n    ```javascript\n    fillIn('#email', 'you@example.com').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method fillIn\n    @param {String} selector jQuery selector finding an input element on the DOM\n    to fill text with\n    @param {String} text text to place inside the input element\n    @return {RSVP.Promise}\n    @public\n  */\n  asyncHelper('fillIn', fillIn);\n\n  /**\n    Finds an element in the context of the app's container element. A simple alias\n    for `app.$(selector)`.\n  \n    Example:\n  \n    ```javascript\n    var $el = find('.my-selector');\n    ```\n  \n    @method find\n    @param {String} selector jQuery string selector for element lookup\n    @return {Object} jQuery object representing the results of the query\n    @public\n  */\n  helper('find', find);\n\n  /**\n    Like `find`, but throws an error if the element selector returns no results.\n  \n    Example:\n  \n    ```javascript\n    var $el = findWithAssert('.doesnt-exist'); // throws error\n    ```\n  \n    @method findWithAssert\n    @param {String} selector jQuery selector string for finding an element within\n    the DOM\n    @return {Object} jQuery object representing the results of the query\n    @throws {Error} throws error if jQuery object returned has a length of 0\n    @public\n  */\n  helper('findWithAssert', findWithAssert);\n\n  /**\n    Causes the run loop to process any pending events. This is used to ensure that\n    any async operations from other helpers (or your assertions) have been processed.\n  \n    This is most often used as the return value for the helper functions (see 'click',\n    'fillIn','visit',etc).\n  \n    Example:\n  \n    ```javascript\n    Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n      visit('secured/path/here')\n      .fillIn('#username', username)\n      .fillIn('#password', password)\n      .click('.submit')\n  \n      return app.testHelpers.wait();\n    });\n  \n    @method wait\n    @param {Object} value The value to be returned.\n    @return {RSVP.Promise}\n    @public\n  */\n  asyncHelper('wait', wait);\n  asyncHelper('andThen', andThen);\n\n  /**\n    Returns the currently active route name.\n  \n  Example:\n  \n  ```javascript\n  function validateRouteName() {\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n  }\n  \n  visit('/some/path').then(validateRouteName)\n  ```\n  \n  @method currentRouteName\n  @return {Object} The name of the currently active route.\n  @since 1.5.0\n  @public\n  */\n  helper('currentRouteName', currentRouteName);\n\n  /**\n    Returns the current path.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentPath\n  @return {Object} The currently active path.\n  @since 1.5.0\n  @public\n  */\n  helper('currentPath', currentPath);\n\n  /**\n    Returns the current URL.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentURL\n  @return {Object} The currently active URL.\n  @since 1.5.0\n  @public\n  */\n  helper('currentURL', currentURL);\n\n  /**\n   Pauses the current test - this is useful for debugging while testing or for test-driving.\n   It allows you to inspect the state of your application at any point.\n  \n   Example (The test will pause before clicking the button):\n  \n   ```javascript\n   visit('/')\n   return pauseTest();\n  \n   click('.btn');\n   ```\n  \n   @since 1.9.0\n   @method pauseTest\n   @return {Object} A promise that will never resolve\n   @public\n  */\n  helper('pauseTest', pauseTest);\n\n  /**\n    Triggers the given DOM event on the element identified by the provided selector.\n  \n    Example:\n  \n    ```javascript\n    triggerEvent('#some-elem-id', 'blur');\n    ```\n  \n    This is actually used internally by the `keyEvent` helper like so:\n  \n    ```javascript\n    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n    ```\n  \n   @method triggerEvent\n   @param {String} selector jQuery selector for finding element on the DOM\n   @param {String} [context] jQuery selector that will limit the selector\n                             argument to find only within the context's children\n   @param {String} type The event type to be triggered.\n   @param {Object} [options] The options to be passed to jQuery.Event.\n   @return {RSVP.Promise}\n   @since 1.5.0\n   @public\n  */\n  asyncHelper('triggerEvent', triggerEvent);\n});\n\n/**\n  Checks a checkbox. Ensures the presence of the `checked` attribute\n   Example:\n   ```javascript\n  check('#remember-me').then(function() {\n    // assert something\n  });\n  ```\n   @method check\n  @param {String} selector jQuery selector finding an `input[type=\"checkbox\"]`\n  element on the DOM to check\n  @return {RSVP.Promise}\n  @private\n*/\n\n/**\n  Unchecks a checkbox. Ensures the absence of the `checked` attribute\n   Example:\n   ```javascript\n  uncheck('#remember-me').then(function() {\n   // assert something\n  });\n  ```\n   @method check\n  @param {String} selector jQuery selector finding an `input[type=\"checkbox\"]`\n  element on the DOM to uncheck\n  @return {RSVP.Promise}\n  @private\n*/\nenifed('ember-testing/initializers', ['exports', 'ember-runtime/system/lazy_load'], function (exports, _emberRuntimeSystemLazy_load) {\n  'use strict';\n\n  var name = 'deferReadiness in `testing` mode';\n\n  _emberRuntimeSystemLazy_load.onLoad('Ember.Application', function (Application) {\n    if (!Application.initializers[name]) {\n      Application.initializer({\n        name: name,\n\n        initialize: function (registry, application) {\n          if (application.testing) {\n            application.deferReadiness();\n          }\n        }\n      });\n    }\n  });\n});\nenifed('ember-testing/setup_for_testing', ['exports', 'ember-metal/core', 'ember-testing/adapters/qunit', 'ember-views/system/jquery'], function (exports, _emberMetalCore, _emberTestingAdaptersQunit, _emberViewsSystemJquery) {\n  'use strict';\n\n  exports.default = setupForTesting;\n\n  var Test, requests;\n\n  function incrementAjaxPendingRequests(_, xhr) {\n    requests.push(xhr);\n    Test.pendingAjaxRequests = requests.length;\n  }\n\n  function decrementAjaxPendingRequests(_, xhr) {\n    for (var i = 0; i < requests.length; i++) {\n      if (xhr === requests[i]) {\n        requests.splice(i, 1);\n      }\n    }\n    Test.pendingAjaxRequests = requests.length;\n  }\n\n  /**\n    Sets Ember up for testing. This is useful to perform\n    basic setup steps in order to unit test.\n  \n    Use `App.setupForTesting` to perform integration tests (full\n    application testing).\n  \n    @method setupForTesting\n    @namespace Ember\n    @since 1.5.0\n    @private\n  */\n\n  function setupForTesting() {\n    if (!Test) {\n      Test = requireModule('ember-testing/test')['default'];\n    }\n\n    _emberMetalCore.default.testing = true;\n\n    // if adapter is not manually set default to QUnit\n    if (!Test.adapter) {\n      Test.adapter = _emberTestingAdaptersQunit.default.create();\n    }\n\n    requests = [];\n    Test.pendingAjaxRequests = requests.length;\n\n    _emberViewsSystemJquery.default(document).off('ajaxSend', incrementAjaxPendingRequests);\n    _emberViewsSystemJquery.default(document).off('ajaxComplete', decrementAjaxPendingRequests);\n    _emberViewsSystemJquery.default(document).on('ajaxSend', incrementAjaxPendingRequests);\n    _emberViewsSystemJquery.default(document).on('ajaxComplete', decrementAjaxPendingRequests);\n  }\n});\n\n// import Test from \"ember-testing/test\";  // ES6TODO: fix when cycles are supported\nenifed('ember-testing/support', ['exports', 'ember-metal/core', 'ember-views/system/jquery', 'ember-metal/environment'], function (exports, _emberMetalCore, _emberViewsSystemJquery, _emberMetalEnvironment) {\n  'use strict';\n\n  /**\n    @module ember\n    @submodule ember-testing\n  */\n\n  var $ = _emberViewsSystemJquery.default;\n\n  /**\n    This method creates a checkbox and triggers the click event to fire the\n    passed in handler. It is used to correct for a bug in older versions\n    of jQuery (e.g 1.8.3).\n  \n    @private\n    @method testCheckboxClick\n  */\n  function testCheckboxClick(handler) {\n    $('<input type=\"checkbox\">').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).appendTo('body').on('click', handler).trigger('click').remove();\n  }\n\n  if (_emberMetalEnvironment.default.hasDOM) {\n    $(function () {\n      /*\n        Determine whether a checkbox checked using jQuery's \"click\" method will have\n        the correct value for its checked property.\n         If we determine that the current jQuery version exhibits this behavior,\n        patch it to work correctly as in the commit for the actual fix:\n        https://github.com/jquery/jquery/commit/1fb2f92.\n      */\n      testCheckboxClick(function () {\n        if (!this.checked && !$.event.special.click) {\n          $.event.special.click = {\n            // For checkbox, fire native event so checked state will be right\n            trigger: function () {\n              if ($.nodeName(this, 'input') && this.type === 'checkbox' && this.click) {\n                this.click();\n                return false;\n              }\n            }\n          };\n        }\n      });\n\n      // Try again to verify that the patch took effect or blow up.\n      testCheckboxClick(function () {\n        _emberMetalCore.default.warn('clicked checkboxes should be checked! the jQuery patch didn\\'t work', this.checked, { id: 'ember-testing.test-checkbox-click' });\n      });\n    });\n  }\n});\nenifed('ember-testing/test', ['exports', 'ember-metal/core', 'ember-metal/run_loop', 'ember-runtime/ext/rsvp', 'ember-testing/setup_for_testing', 'ember-application/system/application'], function (exports, _emberMetalCore, _emberMetalRun_loop, _emberRuntimeExtRsvp, _emberTestingSetup_for_testing, _emberApplicationSystemApplication) {\n  'use strict';\n\n  /**\n    @module ember\n    @submodule ember-testing\n  */\n  var helpers = {};\n  var injectHelpersCallbacks = [];\n\n  /**\n    This is a container for an assortment of testing related functionality:\n  \n    * Choose your default test adapter (for your framework of choice).\n    * Register/Unregister additional test helpers.\n    * Setup callbacks to be fired when the test helpers are injected into\n      your application.\n  \n    @class Test\n    @namespace Ember\n    @public\n  */\n  var Test = {\n    /**\n      Hash containing all known test helpers.\n       @property _helpers\n      @private\n      @since 1.7.0\n    */\n    _helpers: helpers,\n\n    /**\n      `registerHelper` is used to register a test helper that will be injected\n      when `App.injectTestHelpers` is called.\n       The helper method will always be called with the current Application as\n      the first parameter.\n       For example:\n       ```javascript\n      Ember.Test.registerHelper('boot', function(app) {\n        Ember.run(app, app.advanceReadiness);\n      });\n      ```\n       This helper can later be called without arguments because it will be\n      called with `app` as the first parameter.\n       ```javascript\n      App = Ember.Application.create();\n      App.injectTestHelpers();\n      boot();\n      ```\n       @public\n      @method registerHelper\n      @param {String} name The name of the helper method to add.\n      @param {Function} helperMethod\n      @param options {Object}\n    */\n    registerHelper: function (name, helperMethod) {\n      helpers[name] = {\n        method: helperMethod,\n        meta: { wait: false }\n      };\n    },\n\n    /**\n      `registerAsyncHelper` is used to register an async test helper that will be injected\n      when `App.injectTestHelpers` is called.\n       The helper method will always be called with the current Application as\n      the first parameter.\n       For example:\n       ```javascript\n      Ember.Test.registerAsyncHelper('boot', function(app) {\n        Ember.run(app, app.advanceReadiness);\n      });\n      ```\n       The advantage of an async helper is that it will not run\n      until the last async helper has completed.  All async helpers\n      after it will wait for it complete before running.\n        For example:\n       ```javascript\n      Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {\n        click('.delete-' + postId);\n      });\n       // ... in your test\n      visit('/post/2');\n      deletePost(2);\n      visit('/post/3');\n      deletePost(3);\n      ```\n       @public\n      @method registerAsyncHelper\n      @param {String} name The name of the helper method to add.\n      @param {Function} helperMethod\n      @since 1.2.0\n    */\n    registerAsyncHelper: function (name, helperMethod) {\n      helpers[name] = {\n        method: helperMethod,\n        meta: { wait: true }\n      };\n    },\n\n    /**\n      Remove a previously added helper method.\n       Example:\n       ```javascript\n      Ember.Test.unregisterHelper('wait');\n      ```\n       @public\n      @method unregisterHelper\n      @param {String} name The helper to remove.\n    */\n    unregisterHelper: function (name) {\n      delete helpers[name];\n      delete Test.Promise.prototype[name];\n    },\n\n    /**\n      Used to register callbacks to be fired whenever `App.injectTestHelpers`\n      is called.\n       The callback will receive the current application as an argument.\n       Example:\n       ```javascript\n      Ember.Test.onInjectHelpers(function() {\n        Ember.$(document).ajaxSend(function() {\n          Test.pendingAjaxRequests++;\n        });\n         Ember.$(document).ajaxComplete(function() {\n          Test.pendingAjaxRequests--;\n        });\n      });\n      ```\n       @public\n      @method onInjectHelpers\n      @param {Function} callback The function to be called.\n    */\n    onInjectHelpers: function (callback) {\n      injectHelpersCallbacks.push(callback);\n    },\n\n    /**\n      This returns a thenable tailored for testing.  It catches failed\n      `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n      callback in the last chained then.\n       This method should be returned by async helpers such as `wait`.\n       @public\n      @method promise\n      @param {Function} resolver The function used to resolve the promise.\n      @param {String} label An optional string for identifying the promise.\n    */\n    promise: function (resolver, label) {\n      var fullLabel = 'Ember.Test.promise: ' + (label || '<Unknown Promise>');\n      return new Test.Promise(resolver, fullLabel);\n    },\n\n    /**\n     Used to allow ember-testing to communicate with a specific testing\n     framework.\n      You can manually set it before calling `App.setupForTesting()`.\n      Example:\n      ```javascript\n     Ember.Test.adapter = MyCustomAdapter.create()\n     ```\n      If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n      @public\n     @property adapter\n     @type {Class} The adapter to be used.\n     @default Ember.Test.QUnitAdapter\n    */\n    adapter: null,\n\n    /**\n      Replacement for `Ember.RSVP.resolve`\n      The only difference is this uses\n      an instance of `Ember.Test.Promise`\n       @public\n      @method resolve\n      @param {Mixed} The value to resolve\n      @since 1.2.0\n    */\n    resolve: function (val) {\n      return Test.promise(function (resolve) {\n        return resolve(val);\n      });\n    },\n\n    /**\n       This allows ember-testing to play nicely with other asynchronous\n       events, such as an application that is waiting for a CSS3\n       transition or an IndexDB transaction.\n        For example:\n        ```javascript\n       Ember.Test.registerWaiter(function() {\n         return myPendingTransactions() == 0;\n       });\n       ```\n       The `context` argument allows you to optionally specify the `this`\n       with which your callback will be invoked.\n        For example:\n        ```javascript\n       Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n       ```\n        @public\n       @method registerWaiter\n       @param {Object} context (optional)\n       @param {Function} callback\n       @since 1.2.0\n    */\n    registerWaiter: function (context, callback) {\n      if (arguments.length === 1) {\n        callback = context;\n        context = null;\n      }\n      if (!this.waiters) {\n        this.waiters = _emberMetalCore.default.A();\n      }\n      this.waiters.push([context, callback]);\n    },\n    /**\n       `unregisterWaiter` is used to unregister a callback that was\n       registered with `registerWaiter`.\n        @public\n       @method unregisterWaiter\n       @param {Object} context (optional)\n       @param {Function} callback\n       @since 1.2.0\n    */\n    unregisterWaiter: function (context, callback) {\n      if (!this.waiters) {\n        return;\n      }\n      if (arguments.length === 1) {\n        callback = context;\n        context = null;\n      }\n      this.waiters = _emberMetalCore.default.A(this.waiters.filter(function (elt) {\n        return !(elt[0] === context && elt[1] === callback);\n      }));\n    }\n  };\n\n  function helper(app, name) {\n    var fn = helpers[name].method;\n    var meta = helpers[name].meta;\n\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var lastPromise;\n\n      args.unshift(app);\n\n      // some helpers are not async and\n      // need to return a value immediately.\n      // example: `find`\n      if (!meta.wait) {\n        return fn.apply(app, args);\n      }\n\n      lastPromise = run(function () {\n        return Test.resolve(Test.lastPromise);\n      });\n\n      // wait for last helper's promise to resolve and then\n      // execute. To be safe, we need to tell the adapter we're going\n      // asynchronous here, because fn may not be invoked before we\n      // return.\n      Test.adapter.asyncStart();\n      return lastPromise.then(function () {\n        return fn.apply(app, args);\n      }).finally(function () {\n        Test.adapter.asyncEnd();\n      });\n    };\n  }\n\n  function run(fn) {\n    if (!_emberMetalRun_loop.default.currentRunLoop) {\n      return _emberMetalRun_loop.default(fn);\n    } else {\n      return fn();\n    }\n  }\n\n  _emberApplicationSystemApplication.default.reopen({\n    /**\n     This property contains the testing helpers for the current application. These\n     are created once you call `injectTestHelpers` on your `Ember.Application`\n     instance. The included helpers are also available on the `window` object by\n     default, but can be used from this object on the individual application also.\n       @property testHelpers\n      @type {Object}\n      @default {}\n      @public\n    */\n    testHelpers: {},\n\n    /**\n     This property will contain the original methods that were registered\n     on the `helperContainer` before `injectTestHelpers` is called.\n      When `removeTestHelpers` is called, these methods are restored to the\n     `helperContainer`.\n       @property originalMethods\n      @type {Object}\n      @default {}\n      @private\n      @since 1.3.0\n    */\n    originalMethods: {},\n\n    /**\n    This property indicates whether or not this application is currently in\n    testing mode. This is set when `setupForTesting` is called on the current\n    application.\n     @property testing\n    @type {Boolean}\n    @default false\n    @since 1.3.0\n    @public\n    */\n    testing: false,\n\n    /**\n      This hook defers the readiness of the application, so that you can start\n      the app when your tests are ready to run. It also sets the router's\n      location to 'none', so that the window's location will not be modified\n      (preventing both accidental leaking of state between tests and interference\n      with your testing framework).\n       Example:\n       ```\n      App.setupForTesting();\n      ```\n       @method setupForTesting\n      @public\n    */\n    setupForTesting: function () {\n      _emberTestingSetup_for_testing.default();\n\n      this.testing = true;\n\n      this.Router.reopen({\n        location: 'none'\n      });\n    },\n\n    /**\n      This will be used as the container to inject the test helpers into. By\n      default the helpers are injected into `window`.\n       @property helperContainer\n      @type {Object} The object to be used for test helpers.\n      @default window\n      @since 1.2.0\n      @private\n    */\n    helperContainer: null,\n\n    /**\n      This injects the test helpers into the `helperContainer` object. If an object is provided\n      it will be used as the helperContainer. If `helperContainer` is not set it will default\n      to `window`. If a function of the same name has already been defined it will be cached\n      (so that it can be reset if the helper is removed with `unregisterHelper` or\n      `removeTestHelpers`).\n       Any callbacks registered with `onInjectHelpers` will be called once the\n      helpers have been injected.\n       Example:\n      ```\n      App.injectTestHelpers();\n      ```\n       @method injectTestHelpers\n      @public\n    */\n    injectTestHelpers: function (helperContainer) {\n      if (helperContainer) {\n        this.helperContainer = helperContainer;\n      } else {\n        this.helperContainer = window;\n      }\n\n      this.reopen({\n        willDestroy: function () {\n          this._super.apply(this, arguments);\n          this.removeTestHelpers();\n        }\n      });\n\n      this.testHelpers = {};\n      for (var name in helpers) {\n        this.originalMethods[name] = this.helperContainer[name];\n        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n        protoWrap(Test.Promise.prototype, name, helper(this, name), helpers[name].meta.wait);\n      }\n\n      for (var i = 0, l = injectHelpersCallbacks.length; i < l; i++) {\n        injectHelpersCallbacks[i](this);\n      }\n    },\n\n    /**\n      This removes all helpers that have been registered, and resets and functions\n      that were overridden by the helpers.\n       Example:\n       ```javascript\n      App.removeTestHelpers();\n      ```\n       @public\n      @method removeTestHelpers\n    */\n    removeTestHelpers: function () {\n      if (!this.helperContainer) {\n        return;\n      }\n\n      for (var name in helpers) {\n        this.helperContainer[name] = this.originalMethods[name];\n        delete Test.Promise.prototype[name];\n        delete this.testHelpers[name];\n        delete this.originalMethods[name];\n      }\n    }\n  });\n\n  // This method is no longer needed\n  // But still here for backwards compatibility\n  // of helper chaining\n  function protoWrap(proto, name, callback, isAsync) {\n    proto[name] = function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (isAsync) {\n        return callback.apply(this, args);\n      } else {\n        return this.then(function () {\n          return callback.apply(this, args);\n        });\n      }\n    };\n  }\n\n  Test.Promise = function () {\n    _emberRuntimeExtRsvp.default.Promise.apply(this, arguments);\n    Test.lastPromise = this;\n  };\n\n  Test.Promise.prototype = Object.create(_emberRuntimeExtRsvp.default.Promise.prototype);\n  Test.Promise.prototype.constructor = Test.Promise;\n  Test.Promise.resolve = Test.resolve;\n\n  // Patch `then` to isolate async methods\n  // specifically `Ember.Test.lastPromise`\n  var originalThen = _emberRuntimeExtRsvp.default.Promise.prototype.then;\n  Test.Promise.prototype.then = function (onSuccess, onFailure) {\n    return originalThen.call(this, function (val) {\n      return isolate(onSuccess, val);\n    }, onFailure);\n  };\n\n  // This method isolates nested async methods\n  // so that they don't conflict with other last promises.\n  //\n  // 1. Set `Ember.Test.lastPromise` to null\n  // 2. Invoke method\n  // 3. Return the last promise created during method\n  function isolate(fn, val) {\n    var value, lastPromise;\n\n    // Reset lastPromise for nested helpers\n    Test.lastPromise = null;\n\n    value = fn(val);\n\n    lastPromise = Test.lastPromise;\n    Test.lastPromise = null;\n\n    // If the method returned a promise\n    // return that promise. If not,\n    // return the last async helper's promise\n    if (value && value instanceof Test.Promise || !lastPromise) {\n      return value;\n    } else {\n      return run(function () {\n        return Test.resolve(lastPromise).then(function () {\n          return value;\n        });\n      });\n    }\n  }\n\n  exports.default = Test;\n});\nrequireModule(\"ember-testing\");\n\n})();","/* jshint ignore:start */\r\n\r\nrunningTests = true;\r\n\r\n\r\n\r\n/* jshint ignore:end */\r\n"],"names":[],"mappingsqDA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"test-support.js"}