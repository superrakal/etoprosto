{
  "name": "broccoli-sass-source-maps",
  "description": "Libsass-based Sass compiler for Broccoli",
  "version": "1.6.0",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/aexmachina/broccoli-sass-source-maps"
  },
  "keywords": [
    "broccoli-plugin",
    "sass",
    "scss",
    "css",
    "libsass"
  ],
  "dependencies": {
    "broccoli-caching-writer": "^2.0.1",
    "include-path-searcher": "^0.1.0",
    "mkdirp": "^0.3.5",
    "node-sass": "^3.4.1",
    "object-assign": "^2.0.0",
    "rsvp": "^3.0.6"
  },
  "files": [
    "*.js"
  ],
  "readme": "# broccoli-sass\n\nThe broccoli-sass plugin compiles `.scss` and `.sass` files with\n[libsass](https://github.com/sass/libsass).\n\nThis is a fork of broccoli-sass that includes support for more options and provides (partial)\nsupport for source maps by embedding the content of the SASS source files in the source map using `sourcesContent`.\n\nBe aware that the paths in the generated source map not correct, but this module does what I need\nuntil the [underlying issue](https://github.com/sass/libsass/issues/908) is resolved.\n\n## Installation\n\n```bash\nnpm install --save-dev broccoli-sass-source-maps\n```\n\n## Usage\n\n```js\nvar compileSass = require('broccoli-sass-source-maps');\n\nvar outputTree = compileSass(inputTrees, inputFile, outputFile, options);\n```\n\n* **`inputTrees`**: An array of trees that act as the include paths for\n  libsass. If you have a single tree, pass `[tree]`.\n\n* **`inputFile`**: Relative path of the main `.scss` or `.sass` file to compile.\n  Broccoli-sass expects to find this file in the *first* input tree\n  (`inputTrees[0]`).\n\n* **`outputFile`**: Relative path of the output CSS file.\n\n* **`options`**: A hash of options for libsass and caching writer. \n  * Supported options for libsass are:\n  `functions`, `indentedSyntax`, `omitSourceMapUrl`, `outputStyle`, `precision`,\n  `sourceComments`, `sourceMap`, `sourceMapEmbed`, and `sourceMapContents`.\n  * Options for caching writer include: `annotation`, `cacheInclude`, and `cacheExclude` (see details [here][bcw-options]).\n\n* **`nodeSass`**: Allows a different version of [node-sass](https://www.npmjs.com/package/node-sass) to be used.\n\n### Example\n\n```js\nvar appCss = compileSass(['styles', 'vendor'], 'myapp/app.scss', 'assets/app.css');\n```\n\n[bcw-options]: https://github.com/ember-cli/broccoli-caching-writer/tree/979abf92c83af7d625b1fd35c94b4e5f56668b18#new-cachingwriterinputnodes-options\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aexmachina/broccoli-sass-source-maps/issues"
  },
  "_id": "broccoli-sass-source-maps@1.6.0",
  "_from": "broccoli-sass-source-maps@^1.4.0"
}
