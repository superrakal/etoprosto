{
  "name": "ember-cli-meta-tags",
  "version": "1.0.1",
  "description": "An Ember CLI add-on to easily set <meta> tags in the document head.",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "build": "ember build",
    "start": "ember server",
    "test": "ember try:testall"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ronco/ember-cli-meta-tags.git"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": {
    "name": "Ron White",
    "email": "ronco@costite.com"
  },
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^2.1.2",
    "ember-cli": "1.13.8",
    "ember-cli-app-version": "0.5.0",
    "ember-cli-content-security-policy": "0.4.0",
    "ember-cli-dependency-checker": "^1.0.1",
    "ember-cli-htmlbars": "0.7.9",
    "ember-cli-htmlbars-inline-precompile": "^0.2.0",
    "ember-cli-ic-ajax": "0.2.1",
    "ember-cli-inject-live-reload": "^1.3.1",
    "ember-cli-qunit": "^1.0.0",
    "ember-cli-release": "0.2.3",
    "ember-cli-sri": "^1.0.3",
    "ember-cli-uglify": "^1.2.0",
    "ember-disable-proxy-controllers": "^1.0.0",
    "ember-export-application-global": "^1.0.3",
    "ember-disable-prototype-extensions": "^1.0.0",
    "ember-try": "0.0.6"
  },
  "keywords": [
    "ember-addon"
  ],
  "dependencies": {
    "ember-cli-babel": "^5.1.3",
    "ember-cli-htmlbars": "^1.0.1"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "## Legacy Route Meta Mixin Support\n\nThe original edition of this library only supported setting meta tags\non the document and did so by way of a route mixin\n(`RouteMetaMixin`).\n\nUsing this mixin will continue to be supported for the foreseeable\nfuture, and may provide a simpler way to populate head tags on in your\nEmber app if you only need meta tags.  It is now simply a wrapper\naround the headTags service functionality.\n\nHerein lies the original documentation for this mixin.\n\n### Adding Tags Automatically On Transition\n\nIn order to dynamically add meta tags from your routes you will need\nto mixin the `RouteMetaMixin` into your route and then provide the\nappropriate meta tag object.\n\n##### Meta function\n\nYou can provide the meta by implementing a `meta` method on the route\nthat returns the appropriate meta tags.\n\n###### <a name='method-example'></a>Example:\n\n```javascript\n// app/routes/some-page.js\nimport Ember from 'ember';\nimport RouteMetaMixin from 'ember-cli-meta-tags/mixins/route-meta';\n\nexport default Ember.Route.extend(RouteMetaMixin, {\n  meta: function() {\n    // here we are pulling meta data from the model for this route\n    let model = this.modelFor(this.routeName);\n    return {\n      'property': {\n        'og:name': model.get('name'),\n        'og:image': model.get('imageUrl')\n      },\n      'name': {\n        'twitter:image': model.get('imageUrl')\n      }\n    };\n  }\n});\n```\n\nWhen you visit '/some-page' the document head tag will be updated as\nfollows:\n\n```html\n<head>\n  <!-- ... -->\n  <meta property='og:name' content='Ice-T'>\n  <meta property='og:image' content='http://upload.wikimedia.org/wikipedia/en/b/b6/Ice-T-O.G._Original_Gangster_(album_cover_with_matt).jpg'>\n  <meta name='twitter:image' content='http://upload.wikimedia.org/wikipedia/en/b/b6/Ice-T-O.G._Original_Gangster_(album_cover_with_matt).jpg'>\n  <!-- ... -->\n</head>\n```\n\nThese tags will automatically be cleared when transitioning away from\nthis route.\n\n##### Meta object\n\nYou can also define the tags by providing an object as the value for\nthe meta property on the route.  This can either be in-lined in your\nroute definition, or set as a property on the route prior to\nthe didTransition event.\n\n###### Example: static meta property on the route\n```javascript\n// app/routes/some-page.js\nimport Ember from 'ember';\nimport RouteMetaMixin from 'ember-cli-meta-tags/mixins/route-meta';\n\nexport default Ember.Route.extend(RouteMetaMixin, {\n  meta: {\n    'property': {\n      'og:name': 'Ice-T',\n      'og:image': 'http://upload.wikimedia.org/wikipedia/en/b/b6/Ice-T-O.G._Original_Gangster_(album_cover_with_matt).jpg'\n    },\n    'name': {\n      'twitter:image': 'http://upload.wikimedia.org/wikipedia/en/b/b6/Ice-T-O.G._Original_Gangster_(album_cover_with_matt).jpg'\n    }\n  }\n});\n```\n\n###### Example: Setting the meta property in afterModel\n```javascript\nexport default Ember.Route.extend(RouteMetaMixin,{\n\n afterModel: function(model) {\n   this.setMetaTags(model);\n },\n\n setMetaTags: function (model) {\n   var metaTags = {\n     'name': {\n       'description' : model.get('description'),\n       'keywords'    : model.get('name')\n      }\n   };\n\n   this.set('meta', metaTags);\n }\n\n}\n```\n\n### Resetting Tags Outside of Transition\n\nIf you want to update the meta tags for a route outside of a full\ntransition (perhaps due to a controller query parameter change)\nyou can fire the `resetMeta` action from the controller or route and\nthe meta tags will be rebuilt with the new contents returned from\nthe `meta` property function or object.\n\n##### Example\n\n```javascript\n// app/routes/some-page.js\nimport Ember from 'ember';\nimport RouteMetaMixin from 'ember-cli-meta-tags/mixins/route-meta';\n\nexport default Ember.Route.extend(RouteMetaMixin, {\n  meta: function() {\n    let controller = this.controllerFor(this.routeName);\n    // value of meta tags updates with value of `era` on this\n    // route's controller\n    return {\n      'property': {\n        'title': controller.get('era')\n      }\n    }\n  }\n}\n\n\n// app/controller/some-page.js\nimport Ember from 'ember';\n\nexport default Ember.Controller.extend({\n  queryParameters: {\n    era: 'e'\n  },\n  // this observer runs whenever the era query parameter updates\n  // which by default does not trigger a full route transition\n  // so we need to notify the mixin to reset the meta tags\n  eraObserver: Ember.observer('era', function() {\n    // This action will cause the mixin to recompute the \n    //  meta tags for the current route\n    this.send('resetMeta');\n  }),\n});\n```\n\n## Public API Documentation\n\n### RouteMetaMixin\n\nSuitable for mixing into Routes.\n\n#### meta property\n\nThis is a property on the route that the mixin looks for to determine\nthe appropriate meta tags to set on the page.  The value of this\nproperty can either be a function or a plain POJO.\n\n##### As a method\n\n`meta: function()`\n\nWhen the `meta` property resolves to a function that function will be\nexecuted by the mixin with the route as the current context.\n\nThis method should return an object representing the desired meta tag\nstructure.  This POJO should match the structure detailed\n[below](#meta-definition-object).\n\nCalled during `didTransition` phase of the route lifecycle.  The model\nfor the route will be resolved and available for use at this time.\nYou can see this in action [above](#method-example).\n\n##### As a POJO\n\nYou can also set the value of the `meta` property to an object and\nthat will be used directly to populate the meta tags.  This should\nalso be of the structure detailed [below](#meta-definition-object).\n\n#### <a name='meta-definition-object'></a>Meta Definition Object\n\nThe keys of this object represent which attribute will be used to\nidentify the attribute descriptor for the meta tag (ie `property` or\n`name`).  The values for those descriptors are then objects\nthemselves, including the key/value pairs to be set as the descriptor\nattribute value and content value.\n\n##### Example structure\n```javascript\n'property': {\n  'og:name': '<content-value>'\n},\n'name': {\n  'twitter:name': '<content-value>'\n}\n\n```\nThis will result in the following meta tags, assuming your\ncontent-value is equal to 'Ice-T'.\n\n```\n  <meta property='og:name' content='Ice-T'>\n  <meta property='twitter:name' content='Ice-T'>\n```\n  \n#### resetMeta\n\nRouteMetaMixin routes respond to the `resetMeta` action.  This will\nre-run the meta construction method for the route catching the\naction.  The action does not bubble.\n",
  "readmeFilename": "README-route-meta.md",
  "bugs": {
    "url": "https://github.com/ronco/ember-cli-meta-tags/issues"
  },
  "_id": "ember-cli-meta-tags@1.0.1",
  "dist": {
    "shasum": "cf3e41b8afed1a023acfe6b173a9904552145d53"
  },
  "_from": "ember-cli-meta-tags@1.0.1",
  "_resolved": "https://registry.npmjs.org/ember-cli-meta-tags/-/ember-cli-meta-tags-1.0.1.tgz"
}
